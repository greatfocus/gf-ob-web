# Trigger the workflow to deploy to qa environment only when:
# - an existing pull request with any name/type is merged to the main or develop branch
# - a commit is directly pushed to the main or develop branch
  
name: Continuous deployment
  
on:
  push:
    branches:
      - main
  
jobs:

  build_test:
    name: Test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x] # We will deploy with only one version of node  

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v2
        with:
          node-version: ${{ matrix.node-version }}
      - name: npm build and test
        run: |
          npm install
          npm run build --if-present   

  setup:
    needs: [build_test]
    runs-on: ubuntu-latest
    outputs:
      repo: ${{ steps.vars.outputs.repo }}
      commit: ${{ steps.vars.outputs.commit }}
    steps:
      - name: Use repository
        uses: actions/checkout@v2
      - name: Build variables
        id: vars
        run: |
          echo "::set-output name=repo::$GITHUB_REPOSITORY"
          echo "::set-output name=commit::$(git rev-parse --short "$GITHUB_SHA")"
      - name: Upload repository
        uses: actions/upload-artifact@v2
        with:
          name: repository
          path: |
            ${{ github.workspace }}/deploy
            ${{ github.workspace }}/build
            ${{ github.workspace }}/docker
            ${{ github.workspace }}/public
            ${{ github.workspace }}/src
            ${{ github.workspace }}/.dockerignore
            ${{ github.workspace }}/package.json

  docker:
    needs: [setup]
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repository
      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Build and push image
        uses: docker/build-push-action@v2
        with:
          push: true
          file: ./docker/ci/Dockerfile
          tags: mucunga90/gf-ob-web:qa
          # tags: ${{ needs.setup.outputs.repo }}:qa
          build-args: COMMIT=${{ needs.setup.outputs.commit }}
  
  deploy:
    needs: docker
    runs-on: ubuntu-latest
    steps:
      - name: Download repository
        uses: actions/download-artifact@v2
        with:
          name: repository
      - name: Install kubectl
        run: |
          curl -LO https://dl.k8s.io/release/v1.28.3/bin/linux/amd64/kubectl
          curl -LO "https://dl.k8s.io/v1.28.3/bin/linux/amd64/kubectl.sha256"
          echo "$(<kubectl.sha256) kubectl" | sha256sum --check
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
          kubectl version --client
      - name: Create kube config
        run: |
          mkdir -p $HOME/.kube/
          echo "${{ secrets.QA_CLUSTER_CONFIG }}" > $HOME/.kube/config
          echo "${{ secrets.QA_CLUSTER_CLIENT_CERT }}" > $HOME/.kube/client.crt
          echo "${{ secrets.QA_CLUSTER_CLIENT_KEY }}" > $HOME/.kube/client.key
          echo "${{ secrets.QA_CLUSTER_ENV }}" > $HOME/.kube/qa.properties
      - name: Deploy
        run: |
          kubectl --kubeconfig $HOME/.kube/config apply -k deploy/k8s/qa